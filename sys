#!/bin/bash
#
# Wraps systemctl and service/chkconfig.
# Makes them more inclined to understand what you meant.
#
# Alexander F RÃ¸dseth <xyproto@archlinux.org>
# GPL2
#
# TODO: Use case/esac instead of if/elif/else
#

USER=$(whoami)

if [ "${USER}" == "root" ]; then
  RUN=
else
  RUN=$(which sudo)
fi

function twoargs {
  if [[ "$2" == "" ]]; then
    echo 'Two arguments are needed'
    exit 1
  fi
}

function service_fun() {
  CMD=/sbin/service
  CCG=/sbin/chkconfig
  if [[ "$1" == "stop" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$1" == "start" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$1" == "restart" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$1" == "reload" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$1" == "condrestart" ]]; then
    twoargs "$@" || echo >> failed.txt
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$1" == "status" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$1" == "on" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$1" == "off" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$1" == "is-enabled" ]]; then
    twoargs "$@"
    ${RUN} "$CCG" "$2"
  elif [[ "$1" == "daemon-reload" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" "$2" --add
  elif [[ "$2" == "enable" ]]; then
    ${RUN} "$CMD" "$1" on
  elif [[ "$2" == "disable" ]]; then
    ${RUN} "$CMD" "$1" off
  elif [[ "$1" == "list-unit-files" ]]; then
    ${RUN} "$CCG" --list
  elif [[ "$1" == "list" ]]; then
    ${RUN} "$CCG" --list
  elif [[ "$1" == "available" ]]; then
    ${RUN} "$CCG" --list
  elif [[ "$1" == "--add" ]]; then
    twoargs "$@"
    ${RUN} "$CCG" --add "$2"
  elif [[ "$1" == "add" ]]; then
    twoargs "$@"
    ${RUN} "$CCG" --add "$2"
  elif [[ "$1" == "on" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" "$2" on
  elif [[ "$1" == "off" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" "$2" off
  elif [[ "$2" == "list-unit-files" ]]; then
    ${RUN} "$CCG" --list
  elif [[ "$2" == "list" ]]; then
    ${RUN} "$CCG" --list
  elif [[ "$2" == "available" ]]; then
    ${RUN} "$CCG" --list
  elif [[ "$2" == "daemon-reload" ]]; then
    ${RUN} "$CCG" --add "$1"
  else
    ${RUN} "$CMD" $*
  fi
}

function systemd_fun() {
  CMD=/usr/bin/systemctl
  if [[ "$2" == "stop" ]]; then
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$2" == "start" ]]; then
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$2" == "restart" ]]; then
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$2" == "reload" ]]; then
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$2" == "condrestart" ]]; then
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$2" == "status" ]]; then
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$2" == "enable" ]]; then
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$2" == "disable" ]]; then
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$2" == "is-enabled" ]]; then
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$2" == "daemon-reload" ]]; then
    ${RUN} "$CMD" "$2" "$1"
  elif [[ "$1" == "on" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" enable "$2"
  elif [[ "$1" == "off" ]]; then
    twoargs "$@"
    ${RUN} "$CMD" disable "$2"
  elif [[ "$1" == "--list" ]]; then
    ${RUN} "$CMD" list-unit-files --type=service
  elif [[ "$1" == "list" ]]; then
    echo ${RUN} "$CMD" list-unit-files --type=service
    ${RUN} "$CMD" list-unit-files --type=service
  elif [[ "$1" == "available" ]]; then
    ${RUN} "$CMD" list-unit-files --type=service
  elif [[ "$1" == "--add" ]]; then
    ${RUN} "$CMD" daemon-reload
  elif [[ "$1" == "add" ]]; then
    ${RUN} "$CMD" daemon-reload
  elif [[ "$2" == "on" ]]; then
    ${RUN} "$CMD" enable "$1"
  elif [[ "$2" == "off" ]]; then
    ${RUN} "$CMD" disable "$1"
  elif [[ "$2" == "--list" ]]; then
    ${RUN} "$CMD" list-unit-files --type=service
  elif [[ "$2" == "list" ]]; then
    ${RUN} "$CMD" list-unit-files --type=service
  elif [[ "$2" == "available" ]]; then
    ${RUN} "$CMD" list-unit-files --type=service
  elif [[ "$2" == "--add" ]]; then
    ${RUN} "$CMD" daemon-reload
  elif [[ "$2" == "add" ]]; then
    ${RUN} "$CMD" daemon-reload
  else
    ${RUN} "$CMD" $*
   fi
}

if [[ -z $1 ]]; then
  exit 1
fi

if [[ -e /usr/bin/systemctl ]]; then
  systemd_fun $@
elif [[ -e /sbin/service ]]; then
  service_fun $@
fi

